package main

import (
	"log"

	"github.com/KoLili12/bulb-server/internal/database"
	"github.com/KoLili12/bulb-server/internal/handlers"
	"github.com/KoLili12/bulb-server/internal/middleware"
	"github.com/KoLili12/bulb-server/internal/models"
	"github.com/KoLili12/bulb-server/internal/repository"
	"github.com/KoLili12/bulb-server/internal/services"
	"github.com/KoLili12/bulb-server/pkg/config"
	"github.com/gin-gonic/gin"
)

func main() {
	log.Println("üöÄ Starting Bulb API Server...")
	
	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	log.Println("üìã Loading configuration...")
	cfg, err := config.LoadConfig("configs")
	if err != nil {
		log.Fatalf("‚ùå Failed to load configuration: %v", err)
	}
	log.Printf("‚úÖ Configuration loaded for environment: %s", cfg.Server.Mode)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º Gin –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	if cfg.Server.Mode == "release" {
		gin.SetMode(gin.ReleaseMode)
		log.Println("üîß Gin set to release mode")
	} else {
		log.Println("üîß Gin set to debug mode")
	}

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	log.Println("üóÑÔ∏è  Connecting to database...")
	db, err := database.NewDatabase(cfg)
	if err != nil {
		log.Fatalf("‚ùå Failed to connect to database: %v", err)
	}
	log.Println("‚úÖ Database connection established")

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
	log.Println("üîÑ Running database migrations...")

	log.Println("  üìù Migrating User model...")
	if err := db.AutoMigrate(&models.User{}); err != nil {
		log.Fatalf("‚ùå Failed to migrate User: %v", err)
	}

	log.Println("  üìù Migrating Collection model...")
	if err := db.AutoMigrate(&models.Collection{}); err != nil {
		log.Fatalf("‚ùå Failed to migrate Collection: %v", err)
	}

	log.Println("  üìù Migrating Action model...")
	if err := db.AutoMigrate(&models.Action{}); err != nil {
		log.Fatalf("‚ùå Failed to migrate Action: %v", err)
	}

	log.Println("‚úÖ Database migrations completed successfully")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gin
	log.Println("üåê Initializing Gin router...")
	r := gin.Default()

	// CORS middleware
	log.Println("üîß Setting up CORS middleware...")
	r.Use(func(c *gin.Context) {
		c.Header("Access-Control-Allow-Origin", "*")
		c.Header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		c.Header("Access-Control-Allow-Headers", "Origin, Content-Type, Authorization")

		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(204)
			return
		}

		c.Next()
	})

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
	log.Println("üóÉÔ∏è  Initializing repositories...")
	userRepo := repository.NewUserRepository(db)
	collectionRepo := repository.NewCollectionRepository(db)
	actionRepo := repository.NewActionRepository(db)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
	log.Println("‚öôÔ∏è  Initializing services...")
	userService := services.NewUserService(userRepo)
	authService := services.NewAuthService(cfg)
	collectionService := services.NewCollectionService(collectionRepo, actionRepo, userRepo)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
	log.Println("üéØ Initializing handlers...")
	authHandler := handlers.NewAuthHandler(userService, authService)
	userHandler := handlers.NewUserHandler(userService)
	collectionHandler := handlers.NewCollectionHandler(collectionService)

	// Middleware
	log.Println("üîê Setting up authentication middleware...")
	authMiddleware := middleware.NewAuthMiddleware(authService)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
	log.Println("üõ£Ô∏è  Setting up routes...")
	
	// Health check endpoint
	r.GET("/ping", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"message": "pong",
			"status":  "healthy",
			"service": "bulb-api",
		})
	})

	// API –º–∞—Ä—à—Ä—É—Ç—ã
	api := r.Group("/api")
	{
		// ===== –û–¢–ö–†–´–¢–´–ï –ú–ê–†–®–†–£–¢–´ (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏) =====
		
		// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
		auth := api.Group("/auth")
		{
			auth.POST("/register", authHandler.Register)
			auth.POST("/login", authHandler.Login)
			auth.POST("/refresh", authHandler.RefreshToken)
		}

		// –ü—É–±–ª–∏—á–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
		collections := api.Group("/collections")
		{
			collections.GET("", collectionHandler.List)                    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
			collections.GET("/trending", collectionHandler.GetTrending)    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
			collections.GET("/:id", collectionHandler.GetByID)             // –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ ID
			collections.GET("/:id/actions", collectionHandler.GetActions)  // –ö–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
			collections.GET("/:id/stats", collectionHandler.GetCollectionStats) // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
		}

		// –ü—É–±–ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
		users := api.Group("/users")
		{
			users.GET("/:id", userHandler.GetUserByID) // –ü—É–±–ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
		}

		// ===== –ó–ê–©–ò–©–ï–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´ (—Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏) =====
		
		protected := api.Group("/")
		protected.Use(authMiddleware.RequireAuth())
		{
			// –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			protected.GET("/me", userHandler.GetProfile)                    // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
			protected.GET("/user/profile", userHandler.GetProfile)          // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
			protected.PUT("/user/profile", userHandler.UpdateProfile)       // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è

			// –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			protected.GET("/user/collections", collectionHandler.GetUserCollections) // –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

			// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏
			protected.POST("/collections", collectionHandler.Create)                        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
			protected.POST("/collections/with-actions", collectionHandler.CreateWithActions) // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
			protected.PUT("/collections/:id", collectionHandler.Update)                     // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
			protected.DELETE("/collections/:id", collectionHandler.Delete)                  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏

			// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
			protected.POST("/collections/:id/actions", collectionHandler.AddAction)  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
			protected.DELETE("/actions/:id", collectionHandler.RemoveAction)         // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
		}
	}

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
	log.Println("üìã Registered routes:")
	log.Println("  üè• Health: GET /ping")
	log.Println("  üîê Auth:")
	log.Println("    POST /api/auth/register")
	log.Println("    POST /api/auth/login") 
	log.Println("    POST /api/auth/refresh")
	log.Println("  üë• Users:")
	log.Println("    GET  /api/users/:id")
	log.Println("    GET  /api/me (protected)")
	log.Println("    GET  /api/user/profile (protected)")
	log.Println("    PUT  /api/user/profile (protected)")
	log.Println("  üìö Collections:")
	log.Println("    GET  /api/collections")
	log.Println("    GET  /api/collections/trending")
	log.Println("    GET  /api/collections/:id")
	log.Println("    GET  /api/collections/:id/actions")
	log.Println("    GET  /api/collections/:id/stats")
	log.Println("    GET  /api/user/collections (protected)")
	log.Println("    POST /api/collections (protected)")
	log.Println("    POST /api/collections/with-actions (protected)")
	log.Println("    PUT  /api/collections/:id (protected)")
	log.Println("    DELETE /api/collections/:id (protected)")
	log.Println("  üÉè Actions:")
	log.Println("    POST /api/collections/:id/actions (protected)")
	log.Println("    DELETE /api/actions/:id (protected)")

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	serverAddr := ":" + cfg.Server.Port
	log.Printf("üéâ Starting Bulb API Server on port %s", cfg.Server.Port)
	log.Printf("üåç API endpoints available at:")
	log.Printf("   ‚Ä¢ http://localhost:%s/ping (health check)", cfg.Server.Port)
	log.Printf("   ‚Ä¢ http://localhost:%s/api (main API)", cfg.Server.Port)
	log.Printf("   ‚Ä¢ Docs: Check the handlers for detailed endpoint documentation")
	
	if err := r.Run(serverAddr); err != nil {
		log.Fatalf("‚ùå Failed to start server: %v", err)
	}
}